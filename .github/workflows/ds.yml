name: deploy-to-server
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PROJECT_DIR: /var/www/ds_bussiness
  PORT: 80


jobs:
  build_and_test:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Correr pruebas
        run: |
          echo "Probando..."
          # AquÃ­ puedes agregar tus tests reales

  build_and_push:
    needs: build_and_test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU (multi-arch opcional)
        uses: docker/setup-qemu-action@v3

      - name: Build completed
        run: |
          echo "Build completado exitosamente"

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Install rsync
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      - name: Copy to server
        run: |
          rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no" \
              --exclude='.git' \
              --exclude='.github' \
              --exclude='node_modules' \
              . ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PATH }}

      - name: ðŸš¢ Deploy en el servidor
        env:
          HOST: ${{ secrets.DEPLOY_HOST }}
          USER: ${{ secrets.DEPLOY_USER }}
          DIR: ${{ env.PROJECT_DIR }}
          PORT: ${{ env.PORT }}
        run: |
          ssh -o StrictHostKeyChecking=no ${USER}@${HOST} /bin/bash << 'REMOTE'
            set -Eeuo pipefail
            COLOR_OK='\033[0;32m'; COLOR_INFO='\033[0;36m'; COLOR_ERR='\033[0;31m'; NC='\033[0m'
            step() { printf "${COLOR_INFO}â–¶ $1â€¦${NC}\n"; }
            ok()   { printf "${COLOR_OK}âœ” $1${NC}\n"; }
            err()  { printf "${COLOR_ERR}âœ– $1${NC}\n"; exit 1; }
          
            PROJECT_DIR="${{ env.PROJECT_DIR }}"
            PORT="${{ env.PORT }}"
            HEALTH="http://127.0.0.1:${PORT}/"
          
            step "Verificando directorio del proyecto"
            cd "$PROJECT_DIR" || { err "No se pudo acceder al directorio $PROJECT_DIR"; }
          
            step "Health-check ($HEALTH)"
            for i in {1..15}; do 
              if curl -fsSL "$HEALTH" >/dev/null 2>&1; then
                ok "Health-check exitoso"
                break
              fi
              echo "Intento $i/15..."
              sleep 2
            done
          
            step "Recargar Nginx"
            sudo systemctl reload nginx || { err "Error al recargar Nginx"; }
          
            ok "Deploy completado con Ã©xito"
          REMOTE